===========================
	Maria Deslis
	chapter3 - array3
	csci499
	Rader
===========================

maxSpan
---------------------------
public int maxSpan(int[] nums) {
  int count = 0;
  
  for (int i = 0; i < nums.length; i++)// starting from index 0
  {
   for (int j = nums.length; j > i+count; j--) // starting from the last index
   {
    if(nums[i] == nums[j-1]) // move in from both sides inclusively
    {
     count = j - i; // the value of count will be last minus first
    }
   }
  }
  
  return count;
}
---------------------------
fix34
---------------------------
public int[] fix34(int[] nums) {
   for (int i = 0; i < nums.length-1; i++)
   {
    if (nums[i] == 3 && nums[i+1] != 4)
    {
     for (int j = 0;j < nums.length; j++)
     {
      if(nums[j] == 4 && nums[j-1] != 3)
      {
       nums[j] = nums[i+1];
       nums[i+1] = 4;
      }
     }
    }
   }
   
   return nums;
}		
---------------------------
fix45
---------------------------
public int[] fix45(int[] nums) {

 for (int i = 0; i < nums.length-1; i++)
 {
  if (nums[i] == 4 && nums[i+1] != 5)
  {
   for (int j = 0;j < nums.length; j++)
   {
     if ( nums[j] == 5 && ((j > 0 && nums[j-1] != 4) || (j == 0 && nums[j] == 5)))
     {
      nums[j] = nums[i+1];
      nums[i+1] = 5;
     }
   }
  }
 }
   
   return nums;

}
---------------------------
canBalance
---------------------------
public boolean canBalance(int[] nums) {
  int totalSum = 0;
  int currentSum = 0;
  
  if (nums.length < 2)
  { 
   return false;
  }
  
  for (int i = 0; i < nums.length; i++)
  {
   totalSum += nums[i];
  }
  
  for (int j = 0; j < nums.length-1; j++)
  {
   currentSum += nums[j];
   totalSum -= nums[j];
   
   if(totalSum == currentSum)
   {
    return true;
   }
  }
  return false;
   
}
---------------------------
linearIn
---------------------------
public boolean linearIn(int[] outer, int[] inner) {
  boolean notMatch;
  
  for (int i = 0; i < inner.length; i++)
  {
   notMatch = true;
   
   for (int j = 0; j < outer.length; j++)
   {
    if (inner[i] == outer[j]) { notMatch = false; }
   }
   
   if (notMatch) { return false; }
  }
  
  return true;
}
---------------------------
squareUp
---------------------------
public int[] squareUp(int n) {
  int[] squared = new int[n*n];
  
  int value;
  
  if (n == 0) { return squared; }
  
  for (int i = 1; i <= n; i++)
  {
   value = n*i-1;
   
   for (int j = 1; j <= i; j++)
   {
    squared[value] = j;
    value--;
   }
  }
  
  return squared;
}
---------------------------
seriesUp (similar to squareUp)
---------------------------
public int[] seriesUp(int n) {
 int[] series = new int[n*(n+1)/2];
 
 int value = 0;
 
 if (n == 0) { return series; }
 
 for (int i = 1; i <= n; i++)
 {
  for (int j = 1; j <= i; j++)
  {
   series[value] = j;
   value++;
  }
 }
 
 return series;
}
---------------------------
maxMirror
---------------------------
public int maxMirror(int[] nums) {
int currentCount = 0;
int finalCount = 0;
int indexI;
int indexJ;

for (int i = 0; i < nums.length; i++)
{
 
 for (int j = nums.length - 1; j >= 0; j--)
 {
  indexJ = j;
  indexI = i;
  while ( (!(indexJ < 0)) && (!(indexI > nums.length-1)) && nums[indexI] == nums[indexJ])
  {
   currentCount++;
   indexI++;
   indexJ--;
  }
  indexI++;
  
  if(currentCount > finalCount)
  {
   finalCount = currentCount;
   currentCount = 0;
  }
  else
  {
   currentCount = 0;
  }
 }
}

return finalCount;
  
}
---------------------------
countClumps
---------------------------
public int countClumps(int[] nums) {
  int clump = 0;
  int current = -1;
  for (int i = 0; i < nums.length-1; i++)
  {
   if (nums[i] == nums[i+1] && nums[i] != current)
   {
     current = nums[i];
     clump++;
   }
   else if( nums[i] != current)
   {
    current = -1;
   }
  }

  return clump;
}
