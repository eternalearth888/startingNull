package tests;

import static org.junit.Assert.*;


import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


import main.Direction;
import main.ValidateUPC;


public class TestValidator {
	
	ValidateUPC v;
	
	@Before
	public void setup() {
		v = new ValidateUPC();
	}
	
	@Test
	public void testValidUPC() {
		String code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		assertTrue(v.checkUPC(code));		
	}
	
	@Test
	public void testValidRightUPC() {
		String code = "10101001110110011001101101000010011101011100101010111101011011101110110110100010110001000110101";
		assertTrue(v.checkUPC(code));
		code = "10101001110110011001101101000010011101011100101010111101011011101110110110100010110001000110101";
		assertTrue(v.checkUPC(code));
	}
	
	@Test
	public void testDigits() {
		String code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		assertTrue(v.checkUPC(code));
	}
	
	@Test
	public void testBadFirstGuard()  {
		// 101, so test 010, 001, 111, 100
		// Bad first guard
		String code = "01000011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		assertFalse(v.checkEnds(code));
		code = "00100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		assertFalse(v.checkEnds(code));
		code = "11100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		assertFalse(v.checkEnds(code));
		code = "10000011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		assertFalse(v.checkEnds(code));
	}
	
	@Test 
	public void testBadLastGuard() {
		// Bad last guard
		String code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110010";
		assertFalse(v.checkEnds(code));
		code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110111";
		assertFalse(v.checkEnds(code));
		code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110100";
		assertFalse(v.checkEnds(code));
		code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110001";
		assertFalse(v.checkEnds(code));
	
	}
	@Test
	public void testCenterGuard() {
		// Bad center guard
		String code = "101 0001101 0011001 0010011 0111101 0100011 0110001 10101 101000010001001001000111010011100101001110101";
		assertFalse(v.checkCenter(code));
		code = "101 0001101 0011001 0010011 0111101 0100011 0110001 01011 101000010001001001000111010011100101001110101";
		assertFalse(v.checkCenter(code));
		code = "101 0001101 0011001 0010011 0111101 0100011 0110001 01000 101000010001001001000111010011100101001110101";
		assertFalse(v.checkCenter(code));
		code = "101 0001101 0011001 0010011 0111101 0100011 0110001 01110 101000010001001001000111010011100101001110101";
		assertFalse(v.checkCenter(code));
		code = "101 0001101 0011001 0010011 0111101 0100011 0110001 00010 101000010001001001000111010011100101001110101";
		assertFalse(v.checkCenter(code));
		code = "101 0001101 0011001 0010011 0111101 0100011 0110001 11010 101000010001001001000111010011100101001110101";
	}
	
	@Test
	public void testChecksum() {
		// Wrong checksum
		String code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001111101";
		assertFalse(v.checkSum(code));	
	}
	
	@Test
	public void testDirection() {
		String code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		Direction direction = v.determineDirection(code);
		Assert.assertEquals(Direction.LEFT_TO_RIGHT, direction);
		code = "10101001110110011001101101000010011101011100101010111101011011101110110110100010110001000110101";
		direction = v.determineDirection(code);
		Assert.assertEquals(Direction.RIGHT_TO_LEFT, direction);
		code = "10100011010011001001001101111010100011011000101010101000010001001001000111010011100101001110101";
		Assert.assertEquals(Direction.RIGHT_TO_LEFT, direction);		
	}

}
