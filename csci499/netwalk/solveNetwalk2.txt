 // ===========================
// 	Maria Deslis
// 	chapter1 - solveNetwalk2
// 	csci499
// 	Rader
// ===========================
// NOTE THIS IS NOT PERFECT, THESE WAS DONE BIT BY BIT ON DIFFERENT DAYS

int rows = 4;
int columns = 4;

int board[][] = new int[rows][columns];

enum Direction { UP, DOWN, LEFT RIGHT };
enum Pieces { tShape, longShape, server, computer, lShape};

// READING BORDERS
for ( i = 0; i < rows; i++) 
	for (int j = 0; j < columns; j++) 
		// CORNER
		if ( (i == 0 && j == 0) || ( i == 0 && j == columns) || (i == rows && j == 0) || (i == rows && j == columns) )
			switch ( Pieces )
				case computer
					turn it so that is facing inside 
					// but that are two inside options? what if we only worried about changing the computers last?

				case corner
					if (i == 0 && j == 0)
						corner will face down and right
					if (i == 0 && j == columns)
						corner will face down and left
					if (i == rows && j == 0)
						corner will face up and right
					else
						corner will face up and left

		// NOT CORNER BUT STILL BORDER
		else if ( i == 0 || j == 0 || i == rows || j == columns ) 
			switch ( Pieces ) 
				case tShape
					turn tShape so that the long side is parallel with the border it is on and so that the branch
					faces inside

				case longShape
					turn longShape so that it is parallel with the border it is on

				default
					do nothing

// READING WITHIN THE BORDERS
if the piece is longShape
	check the squares directly to its right and left
	check the squares directly to the top and bottom
		if any of these pairs results in the longShape being inbetween two computers
			the longshape must be perpendicular to the computers
			// if it connects the two, it will result in a closed loop
if the piece is corner
		check the squares directly to its right and left
		check the squares directly to its top and bottom
			if any of these squares has a longShape or a tShape
				the longShape/tShape must turn so that it's longest side is parallel with the corner square
		turn the corner to see if it attaches to one side
			if it does not work , then it MUST attach to the other

if a piece has an less than or equal possible attachment points as it has things to attach to
	then it must be rotated to attach to all of them
else
	it must be rotated to avoid all of them
