===========================
	Maria Deslis
	chapter2 - UPC Plan
	csci499
	Rader
===========================

---------------------------
GENERATING CODE
---------------------------
#Restating the problem:
	+ PRECONDITION: 12 digits
	+ POSTCONDITION: 95 character output, this is our UPC code

#Constraints:
	+ Must have left guard, center guard, and right guard

#Divide/Reduce the problem:
	1. First we must create JUnit test
		+ Compare the UPC code created the UPC code it should be
			- This way we don't have to check it over and over again

	2. Second we will create classes
		+ Left-hand side codes:
			- This class will contain the codes that will change the original digit
			into it's equivalent UPC code for the left side
	
		+ Right-hand side codes:
			- This class will contain the codes that will change the original digit
			into its equivalent UPC code for the right side
	
		+ Prompt user:
			-Prompt user for 12 digit code

		+ Check
			- This class will take the 12 digit input that the user gave
			- Check that the input is all integers
			- It will check to see what the first digit is
				- If the first digit is 0 // function: firstDigit
					- Check to see if the last digit is 7 // function: lastSeven
						- If this is true check that the number of digits in betwen is 10 // function: betweenDigits
							- If this is true,  put into array and continue to ConvertLR
				- If the first digit is 7 // function: firstDigit
					- Check to see if the last digit is 0// function: lastZero
						- If this is true check that number of digits in between is 10 // function: betweenDigits
							- If this is true put into array continue to ConvertRL
				( IF ANY OF THESE ARE NOT TRUE PROMPT THE USER TO START OVER ... exception?)

		+ ConvertLR
			- This class will take the 12 digit code that the user gave that was also checked from the Check class
			- It will take the 0 and make it 101, left guard
			- It will then take the first 5 digits and convert them using the left hand code
			- It will then input the center guard*
			- It will take the last 5 digits and conver them using the right hand code
			- It will take the 7 and make it 101, right guard
			- Write UPC code to File

		+ ConvertRL
			- This class will take the 12 digit code that the user gave that was also checked from the Check class
			- It wil take the 7 and make it 101, right guard
			- It will then take the first 5 digits and convert them using the right hand code
			- It will then input the center guard*
			- It will then take the last 5 digits and convert them using the left hand code
			- I will take the 0 and make it 101, left guard	
			- Write UPC code to File

---------------------------
VALIDATING UPC
---------------------------
#Restating the problem:
	+ PRECONDITION: 95 digit code, assuming left, center and right guard
	+ POSTCONDITION: Return true if valid false if not

#Divide/Reduce the problem:
	1. JUnit tests similar to Generate UPC
	2. isValid
		+ Store the UPC code into an array

			+ Check that the first 3 digits are 101
				>if( array[1] = 1)
				>	if (array[2] = 0)
				>		if(array[3] = 1)
			+ Check that are 6 seven digit codes
				- Every seven digit code must begin with 0
				- Every seven digit code must end with 1
			+ Check that their is a center guard 0101
			+ Check that are 6 seven digit codes
				- Every seven digit code must begin with 1
				- Every seven digit code must end with 0
			+ Check that last 3 digits are 101

		+ If the code matches the above requirements, return true
			- Otherwise false, have exception?

===========================
QUESTIONS:
===========================
	1. What is the checksum? Are you referring to the modulo check character?
	2. Please elaborate on computeUPCPlusCheckSum, right now, to me it seems to not have any major difference between computeUPC
	3. Can we have a review on using multiple classes in Java?
		- For example, if the code is left to right to continue our program in ConvertLR
	4. When I validate the UPC, are we validating that the numbers are correct or that it matches the original 12 digits or both?
	5. Will validate be within generate code or a whole other java project in Eclipse?
	6. When validating, how do I tell that I am going left to right or right to left?
		- If we created the UPC code from before, can it only be done left to right?
	7. When checking for the 10 digits, it is obvious I should use a for loop, but if there are more than 10 digits how do I do that?
	8. If the UPC validation returns false, should I prompt the user over?
	
*Still thinking about static vs instance
